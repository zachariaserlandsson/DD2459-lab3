*** This is NuSMV 2.6.0 (compiled on Wed Oct 14 15:35:00 2015)
*** Enabled addons are: compass
*** For more information on NuSMV see <http://nusmv.fbk.eu>
*** or email to <nusmv-users@list.fbk.eu>.
*** Please report bugs to <Please report bugs to <nusmv-users@fbk.eu>>

*** Copyright (c) 2010-2014, Fondazione Bruno Kessler

*** This version of NuSMV is linked to the CUDD library version 2.4.1
*** Copyright (c) 1995-2004, Regents of the University of Colorado

*** This version of NuSMV is linked to the MiniSat SAT solver. 
*** See http://minisat.se/MiniSat.html
*** Copyright (c) 2003-2006, Niklas Een, Niklas Sorensson
*** Copyright (c) 2007-2010, Niklas Sorensson

WARNING *** This version of NuSMV is linked to the zchaff SAT         ***
WARNING *** solver (see http://www.princeton.edu/~chaff/zchaff.html). ***
WARNING *** Zchaff is used in Bounded Model Checking when the         ***
WARNING *** system variable "sat_solver" is set to "zchaff".          ***
WARNING *** Notice that zchaff is for non-commercial purposes only.   ***
WARNING *** NO COMMERCIAL USE OF ZCHAFF IS ALLOWED WITHOUT WRITTEN    ***
WARNING *** PERMISSION FROM PRINCETON UNIVERSITY.                     ***
WARNING *** Please contact Sharad Malik (malik@ee.princeton.edu)      ***
WARNING *** for details.                                              ***

-- specification  G !(state = stop)    is false
-- as demonstrated by the following execution sequence
Trace Description: BMC Counterexample 
Trace Type: Counterexample 
  -> State: 1.1 <-
    state = stop
-- no counterexample found with bound 0
-- specification  G !(state = slow)    is false
-- as demonstrated by the following execution sequence
Trace Description: BMC Counterexample 
Trace Type: Counterexample 
  -> State: 2.1 <-
    state = stop
  -> Input: 2.2 <-
    accelerate = TRUE
    brake = FALSE
  -> State: 2.2 <-
    state = slow
-- no counterexample found with bound 0
-- no counterexample found with bound 1
-- specification  G !(state = fast)    is false
-- as demonstrated by the following execution sequence
Trace Description: BMC Counterexample 
Trace Type: Counterexample 
  -> State: 3.1 <-
    state = stop
  -> Input: 3.2 <-
    accelerate = TRUE
    brake = FALSE
  -> State: 3.2 <-
    state = slow
  -> Input: 3.3 <-
  -> State: 3.3 <-
    state = fast
-- no counterexample found with bound 0
-- specification  G ((state = stop & accelerate) ->  X !(state = slow))    is false
-- as demonstrated by the following execution sequence
Trace Description: BMC Counterexample 
Trace Type: Counterexample 
  -> State: 4.1 <-
    state = stop
  -> Input: 4.2 <-
    accelerate = TRUE
    brake = FALSE
  -> State: 4.2 <-
    state = slow
-- no counterexample found with bound 0
-- no counterexample found with bound 1
-- specification  G ((state = slow & brake) ->  X !(state = stop))    is false
-- as demonstrated by the following execution sequence
Trace Description: BMC Counterexample 
Trace Type: Counterexample 
  -- Loop starts here
  -> State: 5.1 <-
    state = stop
  -> Input: 5.2 <-
    accelerate = TRUE
    brake = FALSE
  -> State: 5.2 <-
    state = slow
  -> Input: 5.3 <-
    accelerate = FALSE
    brake = TRUE
  -> State: 5.3 <-
    state = stop
-- no counterexample found with bound 0
-- no counterexample found with bound 1
-- specification  G (((state = slow & !accelerate) & !brake) ->  X !(state = stop))    is false
-- as demonstrated by the following execution sequence
Trace Description: BMC Counterexample 
Trace Type: Counterexample 
  -- Loop starts here
  -> State: 6.1 <-
    state = stop
  -> Input: 6.2 <-
    accelerate = TRUE
    brake = FALSE
  -> State: 6.2 <-
    state = slow
  -> Input: 6.3 <-
    accelerate = FALSE
  -> State: 6.3 <-
    state = stop
-- no counterexample found with bound 0
-- no counterexample found with bound 1
-- specification  G (((state = slow & accelerate) & !brake) ->  X !(state = fast))    is false
-- as demonstrated by the following execution sequence
Trace Description: BMC Counterexample 
Trace Type: Counterexample 
  -> State: 7.1 <-
    state = stop
  -> Input: 7.2 <-
    accelerate = TRUE
    brake = FALSE
  -> State: 7.2 <-
    state = slow
  -> Input: 7.3 <-
  -> State: 7.3 <-
    state = fast
-- no counterexample found with bound 0
-- no counterexample found with bound 1
-- no counterexample found with bound 2
-- specification  G (((state = fast & !accelerate) & !brake) ->  X !(state = slow))    is false
-- as demonstrated by the following execution sequence
Trace Description: BMC Counterexample 
Trace Type: Counterexample 
  -> State: 8.1 <-
    state = stop
  -> Input: 8.2 <-
    accelerate = TRUE
    brake = FALSE
  -- Loop starts here
  -> State: 8.2 <-
    state = slow
  -> Input: 8.3 <-
  -> State: 8.3 <-
    state = fast
  -> Input: 8.4 <-
    accelerate = FALSE
  -> State: 8.4 <-
    state = slow
-- no counterexample found with bound 0
-- no counterexample found with bound 1
-- no counterexample found with bound 2
-- specification  G ((state = fast & brake) ->  X !(state = stop))    is false
-- as demonstrated by the following execution sequence
Trace Description: BMC Counterexample 
Trace Type: Counterexample 
  -- Loop starts here
  -> State: 9.1 <-
    state = stop
  -> Input: 9.2 <-
    accelerate = TRUE
    brake = FALSE
  -> State: 9.2 <-
    state = slow
  -> Input: 9.3 <-
  -> State: 9.3 <-
    state = fast
  -> Input: 9.4 <-
    accelerate = FALSE
    brake = TRUE
  -> State: 9.4 <-
    state = stop
